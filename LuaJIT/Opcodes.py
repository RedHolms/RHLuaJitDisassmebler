class OpcodeInfo:
  value: int
  name: str
  description: str
  arguments: dict[str, str] # Maps: [argument name (a, b, c or d)] = argument type

  def __init__(self, value: int, name: str, a = None, b = None, c = None, d = None, desc: str = None):
    self.value = value
    self.name = name
    self.description = desc
    self.arguments = {}

    if a is not None:
      self.arguments['a'] = a
    if b is not None:
      self.arguments['b'] = b
    if c is not None:
      self.arguments['c'] = c
    if d is not None:
      self.arguments['d'] = d

# Jumps and primitives are different
TYPES_TO_PREFIXES_MAP = {
  "var": "%",
  "base": "%%",
  "rbase": "%%",
  "uv": "^",
  "lit": "",
  "lits": "",
  "num": "#",
  "str": "@",
  "tab": "@",
  "func": "@",
  "cdata": "@",
}

OPCODES_INFO = [
  OpcodeInfo(0, "ISLT", a="var", d="var", desc="JMP if {a} < {d}"),
  OpcodeInfo(1, "ISGE", a="var", d="var", desc="JMP if {a} >= {d}"),
  OpcodeInfo(2, "ISLE", a="var", d="var", desc="JMP if {a} <= {d}"),
  OpcodeInfo(3, "ISGT", a="var", d="var", desc="JMP if {a} > {d}"),
  OpcodeInfo(4, "ISEQV", a="var", d="var", desc="JMP if {a} == {d}"),
  OpcodeInfo(5, "ISNEV", a="var", d="var", desc="JMP if {a} ~= {d}"),
  OpcodeInfo(6, "ISEQS", a="var", d="str", desc="JMP if {a} == {d}"),
  OpcodeInfo(7, "ISNES", a="var", d="str", desc="JMP if {a} ~= {d}"),
  OpcodeInfo(8, "ISEQN", a="var", d="num", desc="JMP if {a} == {d}"),
  OpcodeInfo(9, "ISNEN", a="var", d="num", desc="JMP if {a} == {d}"),
  OpcodeInfo(10, "ISEQP", a="var", d="pri", desc="JMP if {a} == {d}"),
  OpcodeInfo(11, "ISNEP", a="var", d="pri", desc="JMP if {a} == {d}"),
  OpcodeInfo(12, "ISTC", a="var", d="var", desc="JMP if {d}, {a} = {d}"),
  OpcodeInfo(13, "ISFC", a="var", d="var", desc="JMP if not {d}, {a} = {d}"),
  OpcodeInfo(14, "IST", d="var", desc="JMP if {d}"),
  OpcodeInfo(15, "ISF", d="var", desc="JMP if not {d}"),
  OpcodeInfo(16, "ISTYPE", a="var", d="lit", desc="JMP if type({a}) == {d}"),
  OpcodeInfo(17, "ISNUM", a="var", d="lit"),
  OpcodeInfo(18, "MOV", a="var", d="var", desc="{a} = {d}"),
  OpcodeInfo(19, "NOT", a="var", d="var", desc="{a} = not {d}"),
  OpcodeInfo(20, "UNM", a="var", d="var", desc="{a} = -{d}"),
  OpcodeInfo(21, "LEN", a="var", d="var", desc="{a} = #({d})"),
  OpcodeInfo(22, "ADDVN", a="var", b="var", c="num", desc="{a} = {b} + {c}"),
  OpcodeInfo(23, "SUBVN", a="var", b="var", c="num", desc="{a} = {b} - {c}"),
  OpcodeInfo(24, "MULVN", a="var", b="var", c="num", desc="{a} = {b} * {c}"),
  OpcodeInfo(25, "DIVVN", a="var", b="var", c="num", desc="{a} = {b} / {c}"),
  OpcodeInfo(26, "MODVN", a="var", b="var", c="num", desc="{a} = {b} % {c}"),
  OpcodeInfo(27, "ADDNV", a="var", b="var", c="num", desc="{a} = {b} + {c}"),
  OpcodeInfo(28, "SUBNV", a="var", b="var", c="num", desc="{a} = {b} - {c}"),
  OpcodeInfo(29, "MULNV", a="var", b="var", c="num", desc="{a} = {b} * {c}"),
  OpcodeInfo(30, "DIVNV", a="var", b="var", c="num", desc="{a} = {b} / {c}"),
  OpcodeInfo(31, "MODNV", a="var", b="var", c="num", desc="{a} = {b} % {c}"),
  OpcodeInfo(32, "ADDVV", a="var", b="var", c="var", desc="{a} = {b} + {c}"),
  OpcodeInfo(33, "SUBVV", a="var", b="var", c="var", desc="{a} = {b} - {c}"),
  OpcodeInfo(34, "MULVV", a="var", b="var", c="var", desc="{a} = {b} * {c}"),
  OpcodeInfo(35, "DIVVV", a="var", b="var", c="var", desc="{a} = {b} / {c}"),
  OpcodeInfo(36, "MODVV", a="var", b="var", c="var", desc="{a} = {b} % {c}"),
  OpcodeInfo(37, "POW", a="var", b="var", c="var", desc="{a} = {b} ^ {c}"),
  OpcodeInfo(38, "CAT", a="var", b="rbase", c="rbase", desc="{a} = {b} .. {b}+1 .. (...) .. {c}"),
  OpcodeInfo(39, "KSTR", a="var", d="str", desc="{a} = {d}"),
  OpcodeInfo(40, "KCDATA", a="var", d="cdata", desc="{a} = {d}"),
  OpcodeInfo(41, "KSHORT", a="var", d="lits", desc="{a} = {d}"),
  OpcodeInfo(42, "KNUM", a="var", d="num", desc="{a} = {d}"),
  OpcodeInfo(43, "KPRI", a="var", d="pri", desc="{a} = {d}"),
  OpcodeInfo(44, "KNIL", a="base", d="base", desc="{a} = {d}"),
  OpcodeInfo(45, "UGET", a="var", d="uv", desc="{a} = {d}"),
  OpcodeInfo(46, "USETV", a="uv", d="var", desc="{a} = {d}"),
  OpcodeInfo(47, "USETS", a="uv", d="str", desc="{a} = {d}"),
  OpcodeInfo(48, "USETN", a="uv", d="num", desc="{a} = {d}"),
  OpcodeInfo(49, "USETP", a="uv", d="pri", desc="{a} = {d}"),
  OpcodeInfo(50, "UCLO", a="rbase", d="jump", desc="Close all slots >= {a}, JMP {d}"),
  OpcodeInfo(51, "FNEW", a="var", d="func", desc="{a} = new Closure({d})"),
  OpcodeInfo(52, "TNEW", a="var", d="lit", desc="{a} = new Table(array_size={0}, hash_size={1})"),
  OpcodeInfo(53, "TDUP", a="var", d="tab", desc="{a} = {d}"),
  OpcodeInfo(54, "GGET", a="var", d="str", desc="{a} = _G[{d}]"),
  OpcodeInfo(55, "GSET", a="var", d="str", desc="_G[{d}] = {a}"),
  OpcodeInfo(56, "TGETV", a="var", b="var", c="var", desc="{a} = {b}[{c}]"),
  OpcodeInfo(57, "TGETS", a="var", b="var", c="str", desc="{a} = {b}[{c}]"),
  OpcodeInfo(58, "TGETB", a="var", b="var", c="lit", desc="{a} = {b}[{c}]"),
  OpcodeInfo(59, "TGETR", a="var", b="var", c="var", desc="{a} = {b}[{c}]"),
  OpcodeInfo(60, "TSETV", a="var", b="var", c="var", desc="{b}[{c}] = {a}"),
  OpcodeInfo(61, "TSETS", a="var", b="var", c="str", desc="{b}[{c}] = {a}"),
  OpcodeInfo(62, "TSETB", a="var", b="var", c="lit", desc="{b}[{c}] = {a}"),
  OpcodeInfo(63, "TSETM", a="base", d="num", desc="({a}-1)[{d}], ({a}-1)[{d}+1], ... = {a}, {a}+1, ..."),
  OpcodeInfo(64, "TSETR", a="var", b="var", c="var", desc="{b}[{c}] = {a}"),
  # TODO all opcodes descriptions
  OpcodeInfo(65, "CALLM", a="base", b="lit", c="lit"),
  OpcodeInfo(66, "CALL", a="base", b="lit", c="lit"),
  OpcodeInfo(67, "CALLMT", a="base", d="lit"),
  OpcodeInfo(68, "CALLT", a="base", d="lit"),
  OpcodeInfo(69, "ITERC", a="base", b="lit", c="lit"),
  OpcodeInfo(70, "ITERN", a="base", b="lit", c="lit"),
  OpcodeInfo(71, "VARG", a="base", b="lit", c="lit"),
  OpcodeInfo(72, "ISNEXT", a="base", d="jump"),
  OpcodeInfo(73, "RETM", a="base", d="lit"),
  OpcodeInfo(74, "RET", a="rbase", d="lit"),
  OpcodeInfo(75, "RET0", a="rbase", d="lit"),
  OpcodeInfo(76, "RET1", a="rbase", d="lit"),
  OpcodeInfo(77, "FORI", a="base", d="jump"),
  OpcodeInfo(78, "JFORI", a="base", d="jump"),
  OpcodeInfo(79, "FORL", a="base", d="jump"),
  OpcodeInfo(80, "IFORL", a="base", d="jump"),
  OpcodeInfo(81, "JFORL", a="base", d="lit"),
  OpcodeInfo(82, "ITERL", a="base", d="jump"),
  OpcodeInfo(83, "IITERL", a="base", d="jump"),
  OpcodeInfo(84, "JITERL", a="base", d="lit"),
  OpcodeInfo(85, "LOOP", a="rbase", d="jump"),
  OpcodeInfo(86, "ILOOP", a="rbase", d="jump"),
  OpcodeInfo(87, "JLOOP", a="rbase", d="lit"),
  OpcodeInfo(88, "JMP", a="rbase", d="jump"),
  OpcodeInfo(89, "FUNCF", a="rbase"),
  OpcodeInfo(90, "IFUNCF", a="rbase"),
  OpcodeInfo(91, "JFUNCF", a="rbase", d="lit"),
  OpcodeInfo(92, "FUNCV", a="rbase"),
  OpcodeInfo(93, "IFUNCV", a="rbase"),
  OpcodeInfo(94, "JFUNCV", a="rbase", d="lit"),
  OpcodeInfo(95, "FUNCC", a="rbase"),
  OpcodeInfo(96, "FUNCCW", a="rbase"),
]

OPCODES_MAP = {
  "ISLT": OPCODES_INFO[0],
  "ISGE": OPCODES_INFO[1],
  "ISLE": OPCODES_INFO[2],
  "ISGT": OPCODES_INFO[3],
  "ISEQV": OPCODES_INFO[4],
  "ISNEV": OPCODES_INFO[5],
  "ISEQS": OPCODES_INFO[6],
  "ISNES": OPCODES_INFO[7],
  "ISEQN": OPCODES_INFO[8],
  "ISNEN": OPCODES_INFO[9],
  "ISEQP": OPCODES_INFO[10],
  "ISNEP": OPCODES_INFO[11],
  "ISTC": OPCODES_INFO[12],
  "ISFC": OPCODES_INFO[13],
  "IST": OPCODES_INFO[14],
  "ISF": OPCODES_INFO[15],
  "ISTYPE": OPCODES_INFO[16],
  "ISNUM": OPCODES_INFO[17],
  "MOV": OPCODES_INFO[18],
  "NOT": OPCODES_INFO[19],
  "UNM": OPCODES_INFO[20],
  "LEN": OPCODES_INFO[21],
  "ADDVN": OPCODES_INFO[22],
  "SUBVN": OPCODES_INFO[23],
  "MULVN": OPCODES_INFO[24],
  "DIVVN": OPCODES_INFO[25],
  "MODVN": OPCODES_INFO[26],
  "ADDNV": OPCODES_INFO[27],
  "SUBNV": OPCODES_INFO[28],
  "MULNV": OPCODES_INFO[29],
  "DIVNV": OPCODES_INFO[30],
  "MODNV": OPCODES_INFO[31],
  "ADDVV": OPCODES_INFO[32],
  "SUBVV": OPCODES_INFO[33],
  "MULVV": OPCODES_INFO[34],
  "DIVVV": OPCODES_INFO[35],
  "MODVV": OPCODES_INFO[36],
  "POW": OPCODES_INFO[37],
  "CAT": OPCODES_INFO[38],
  "KSTR": OPCODES_INFO[39],
  "KCDATA": OPCODES_INFO[40],
  "KSHORT": OPCODES_INFO[41],
  "KNUM": OPCODES_INFO[42],
  "KPRI": OPCODES_INFO[43],
  "KNIL": OPCODES_INFO[44],
  "UGET": OPCODES_INFO[45],
  "USETV": OPCODES_INFO[46],
  "USETS": OPCODES_INFO[47],
  "USETN": OPCODES_INFO[48],
  "USETP": OPCODES_INFO[49],
  "UCLO": OPCODES_INFO[50],
  "FNEW": OPCODES_INFO[51],
  "TNEW": OPCODES_INFO[52],
  "TDUP": OPCODES_INFO[53],
  "GGET": OPCODES_INFO[54],
  "GSET": OPCODES_INFO[55],
  "TGETV": OPCODES_INFO[56],
  "TGETS": OPCODES_INFO[57],
  "TGETB": OPCODES_INFO[58],
  "TGETR": OPCODES_INFO[59],
  "TSETV": OPCODES_INFO[60],
  "TSETS": OPCODES_INFO[61],
  "TSETB": OPCODES_INFO[62],
  "TSETM": OPCODES_INFO[63],
  "TSETR": OPCODES_INFO[64],
  "CALLM": OPCODES_INFO[65],
  "CALL": OPCODES_INFO[66],
  "CALLMT": OPCODES_INFO[67],
  "CALLT": OPCODES_INFO[68],
  "ITERC": OPCODES_INFO[69],
  "ITERN": OPCODES_INFO[70],
  "VARG": OPCODES_INFO[71],
  "ISNEXT": OPCODES_INFO[72],
  "RETM": OPCODES_INFO[73],
  "RET": OPCODES_INFO[74],
  "RET0": OPCODES_INFO[75],
  "RET1": OPCODES_INFO[76],
  "FORI": OPCODES_INFO[77],
  "JFORI": OPCODES_INFO[78],
  "FORL": OPCODES_INFO[79],
  "IFORL": OPCODES_INFO[80],
  "JFORL": OPCODES_INFO[81],
  "ITERL": OPCODES_INFO[82],
  "IITERL": OPCODES_INFO[83],
  "JITERL": OPCODES_INFO[84],
  "LOOP": OPCODES_INFO[85],
  "ILOOP": OPCODES_INFO[86],
  "JLOOP": OPCODES_INFO[87],
  "JMP": OPCODES_INFO[88],
  "FUNCF": OPCODES_INFO[89],
  "IFUNCF": OPCODES_INFO[90],
  "JFUNCF": OPCODES_INFO[91],
  "FUNCV": OPCODES_INFO[92],
  "IFUNCV": OPCODES_INFO[93],
  "JFUNCV": OPCODES_INFO[94],
  "FUNCC": OPCODES_INFO[95],
  "FUNCCW": OPCODES_INFO[96]
}

def get_opcode_value(name: str):
  return OPCODES_MAP[name].value

def get_opcode_name(value: int):
  return OPCODES_INFO[value].name

UNKNOWN_OPCODE_INFO = OpcodeInfo(-1, "UNKNWN")